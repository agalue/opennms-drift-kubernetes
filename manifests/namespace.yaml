# @author Alejandro Galue <agalue@opennms.org>
#
# TODO Define resource quota and limits.
# TODO Define default limits.
#
# Adding Users:
#
# - Create a CSR with openssl or cfssl.
# - Create a CertificateSigningRequest object.
# - Approve the certificate using the "kubectl certificate approve" command.
# - Download the signed certificate using the "kubectl get csr" command.
# - Set the kubectl context with the key and the certificate.
#
# To create user 'agalue' that belongs to the group 'onms-admin':
#
# cat <<EOF | cfssl genkey - | cfssljson -bare agalue
# {
#   "CN": "agalue",
#   "names": [
#     {
#       "O": "onms-admin"
#     }
#   ],
#   "key": {
#     "algo": "rsa",
#     "size": 2048
#   }
# }
# EOF
#
# To create user 'jdoe' that belongs to the group 'onms-operator':
#
# cat <<EOF | cfssl genkey - | cfssljson -bare jdoe
# {
#   "CN": "jdoe",
#   "names": [
#     {
#       "O": "onms-operator"
#     }
#   ],
#   "key": {
#     "algo": "rsa",
#     "size": 2048
#   }
# }
# EOF
#
# To authorize user 'agalue' to access the cluster:
#
# cat <<EOF | kubectl apply -f -
# apiVersion: certificates.k8s.io/v1
# kind: CertificateSigningRequest
# metadata:
#   name: agalue
# spec:
#   request: $(cat agalue.csr | base64 | tr -d '\n')
#   signerName: kubernetes.io/kube-apiserver-client
#   usages:
#   - digital signature
#   - client auth
# EOF
#
# kubectl certificate approve agalue
# kubectl get csr agalue -o jsonpath='{.status.certificate}' | base64 --decode > agalue.crt
#
# Then add a new context for user 'agalue':
#
# cluster=$(kubectl config view -o jsonpath='{.clusters[*].name}')
# kubectl config set-credentials agalue --client-certificate=agalue.crt --client-key=agalue-key.pem
# kubectl config set-context agalue-ctx --user=agalue --namespace=opennms --cluster=$cluster
#
# Then, switch to the new context for user 'agalue':
# kubectl config use-context agalue-ctx
#
# You can repeat the same process for user 'jdoe'.

---
apiVersion: v1
kind: Namespace
metadata:
  name: opennms

# The following is optional.
# It is here as a template in case other admin/operators have to interact with the cluster.

# RBAC Role to view certain object in the opennms namespace.
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: opennms
  name: opennms-operators
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - pods
  - pods/log
  - services
  verbs:
  - get
  - list
  - watch

# RBAC RoleBinding to associate the users of group "onms-operator" to the "opennms-operators" role.
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: opennms
  name: opennms-operators-binding
subjects:
- kind: Group
  name: onms-operator
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: opennms-operators
  apiGroup: rbac.authorization.k8s.io

# RBAC Role to manage any object in the opennms namespace.
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: opennms
  name: opennms-admins
rules:
- apiGroups:
  - "*"
  resources:
  - "*"
  verbs:
  - "*"

# RBAC RoleBinding to associate the users of group "onms-admin" to the "opennms-admins" role.
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: opennms
  name: opennms-admins-binding
subjects:
- kind: Group
  name: onms-admin
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: opennms-admins
  apiGroup: rbac.authorization.k8s.io

# RBAC ClusterRoleBinding to allow users of group "onms-admin" to manage persistent volumes.
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: opennms
  name: opennms-storage-binding
subjects:
- kind: Group
  name: onms-admin
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: system:persistent-volume-provisioner
  apiGroup: rbac.authorization.k8s.io
