# @author Alejandro Galue <agalue@opennms.org>
#
# Sentinel is required only for Processing Flows and Telemetry Data.
# Using StatefulSets for Sentinels only to have a unique and immutable SENTINEL_ID.
# SENTINEL_ID and SENTINEL_LOCATION are required for tracing.
#
# NOTES:
# - It is perfectly valid to have all the required configuration files on a config-map,
#   and then mount those files to the overlay directory, instead of using an initContainer.

---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: sentinel
  namespace: opennms
spec:
  maxReplicas: 5
  minReplicas: 2
  scaleTargetRef:
    apiVersion: apps/v1
    kind: StatefulSet
    name: sentinel
  targetCPUUtilizationPercentage: 90

---
apiVersion: v1
kind: Service
metadata:
  name: sentinel
  namespace: opennms
  labels:
    app: sentinel
spec:
  clusterIP: None
  ports:
  - name: karaf
    protocol: TCP
    port: 8301
    targetPort: karaf
  - name: http
    protocol: TCP
    port: 8181
    targetPort: http
  selector:
    app: sentinel

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: sentinel
  namespace: opennms
  labels:
    app: sentinel
spec:
  serviceName: sentinel
  replicas: 2
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app: sentinel
  template:
    metadata:
      labels:
        app: sentinel
    spec:
      terminationGracePeriodSeconds: 60
      affinity: # Avoid scheduling the pod in the same host as the Core OpenNMS when possible
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - onms
      initContainers:
      # Wait for all the dependencies
      - name: dependencies
        image: waisbrot/wait
        imagePullPolicy: IfNotPresent
        env:
        - name: TARGETS
          value: opennms-core.opennms.svc.cluster.local:8980
        - name: TIMEOUT
          value: '900'
      # Initialize Sentinel Configuration
      # Requires the same image/version used at runtime: sentinel
      - name: init-config
        image: bash
        imagePullPolicy: IfNotPresent
        command: [ bash, /init.sh ]
        env:
        - name: TZ
          valueFrom:
            configMapKeyRef:
              key: TIMEZONE
              name: common-settings
        - name: INSTANCE_ID
          valueFrom:
            configMapKeyRef:
              key: OPENNMS_INSTANCE_ID
              name: common-settings
        - name: KAFKA_SERVER
          value: kafka.opennms.svc.cluster.local
        - name: KAFKA_SASL_USERNAME
          valueFrom:
            secretKeyRef:
              key: KAFKA_SASL_USERNAME
              name: onms-passwords
        - name: KAFKA_SASL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: KAFKA_SASL_PASSWORD
              name: onms-passwords
        - name: CASSANDRA_SERVER
          value: cassandra.opennms.svc.cluster.local
        - name: ELASTIC_SERVER
          value: esdata.opennms.svc.cluster.local
        - name: ELASTIC_PASSWORD
          valueFrom:
            secretKeyRef:
              key: ELASTICSEARCH_PASSWORD
              name: onms-passwords
        - name: ELASTIC_INDEX_STRATEGY_FLOWS
          valueFrom:
            configMapKeyRef:
              key: ELASTIC_INDEX_STRATEGY_FLOWS
              name: common-settings
        - name: ELASTIC_REPLICATION_FACTOR
          valueFrom:
            configMapKeyRef:
              key: ELASTIC_REPLICATION_FACTOR
              name: common-settings
        - name: ELASTIC_NUM_SHARDS
          valueFrom:
            configMapKeyRef:
              key: ELASTIC_NUM_SHARDS
              name: common-settings
        - name: OPENNMS_HTTP_USER
          value: admin
        - name: OPENNMS_HTTP_PASS
          valueFrom:
            secretKeyRef:
              key: OPENNMS_UI_ADMIN_PASSWORD
              name: onms-passwords
        - name: NUM_LISTENER_THREADS
          valueFrom:
            configMapKeyRef:
              key: KAFKA_NUM_PARTITIONS
              name: common-settings
        - name: JAEGER_AGENT_HOST # Should be consistent with jaeger.yaml
          value: onms-tracing-agent.opennms.svc.cluster.local
        volumeMounts:
        - name: etc-overlay
          mountPath: /etc-overlay
        - name: init-scripts
          mountPath: /init.sh
          subPath: onms-sentinel-init.sh
      containers:
      - name: sentinel
        image: opennms/sentinel:28.1.0
        imagePullPolicy: IfNotPresent
        args:
        - -c
        ports:
        - containerPort: 8181
          name: http
        - containerPort: 8301
          name: karaf
        env:
        - name: TZ
          valueFrom:
            configMapKeyRef:
              key: TIMEZONE
              name: common-settings
        - name: SENTINEL_ID # Required when using tracing through Jaeger
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: SENTINEL_LOCATION # Required when using tracing through Jaeger
          valueFrom:
            configMapKeyRef:
              key: MINION_LOCATION
              name: common-settings
        - name: POSTGRES_HOST
          value: postgresql.opennms.svc.cluster.local
        - name: POSTGRES_PORT
          value: '5432'
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              key: POSTGRES_PASSWORD
              name: onms-passwords
        - name: POSTGRES_DB
          value: opennms
        - name: OPENNMS_HTTP_URL
          value: http://opennms-core.opennms.svc.cluster.local:8980/opennms
        - name: OPENNMS_HTTP_USER
          value: admin
        - name: OPENNMS_HTTP_PASS
          valueFrom:
            secretKeyRef:
              key: OPENNMS_UI_ADMIN_PASSWORD
              name: onms-passwords
        - name: MEM_TOTAL_MB
          valueFrom:
            resourceFieldRef:
              resource: requests.memory
              divisor: 1Mi
        - name: JAVA_OPTS
          value: -Xms$(MEM_TOTAL_MB)m -Xmx$(MEM_TOTAL_MB)m -XX:+AlwaysPreTouch -XX:+UseG1GC -XX:+UseStringDeduplication -Dcom.datastax.driver.FORCE_NIO=true
        - name: MAX_FD # Maximum File Descriptors
          value: '65536'
        volumeMounts:
        - name: etc-overlay
          mountPath: /opt/sentinel-etc-overlay
        resources: # When Cassandra is used, allow enough memory for the resource cache and the ring buffer
          limits:
            cpu: '1'
            memory: 2Gi
          requests:
            cpu: 750m
            memory: 1Gi
        readinessProbe:
          exec:
            command:
            - /health.sh
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe: # WARNING: The health-check checks dependencies, which is not suitable for liveness probes
          exec:
            command:
            - /health.sh
          initialDelaySeconds: 60
          periodSeconds: 60
          timeoutSeconds: 15
      volumes:
      - name: etc-overlay
        emptyDir: {}
      - name: init-scripts
        configMap:
          name: init-scripts
