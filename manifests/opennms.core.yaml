# @author Alejandro Galue <agalue@opennms.org>
#
# NOTES:
# - It is perfectly valid to have all the required configuration files on a config-map,
#   and then mount those files to the overlay directory, instead of using an initContainer.
#   That said, without the intelligence to guard against upgrades through the initContainer
#   script, if you opt for using config-maps, you have to prepare the config files on the PV
#   prior upgrading the version of OpenNMS on the chosen image.
#
# WARNING:
# - Internet access from the container is required to retrieve ALEC binaries from GitHub.
# - This deployment will have a persistent volume for /opt/opennms/etc to track the configuration changes.
#
# TODO:
# - Potential tools for managing /opt/opennms/etc:
#   https://vapor-ware.github.io/ksync/
#   https://github.com/kubernetes/git-sync
#   https://gitkube.sh
# - Add a lifecycle.preStart to execute a "git commit" of the current state of the configuration,
#   in order to track what has been changed between since the last time the Pod was running.
# - The reason for having a container sharing NFS is because AWS EBS doesn't support ReadOnlyMany mode.
#   Instead, using EFS could be a solution for AWS:
#   https://github.com/kubernetes-incubator/external-storage/tree/master/aws/efs

---
apiVersion: v1
kind: Service
metadata:
  name: opennms-core
  namespace: opennms
  labels:
    app: onms
spec:
  clusterIP: None
  ports:
  - port: 8980
    name: http
  - port: 8101
    name: karaf
  selector:
    app: onms

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: onms
  namespace: opennms
  labels:
    app: onms
spec:
  serviceName: opennms-core
  replicas: 1 # The solution only allows 1 instance
  selector:
    matchLabels:
      app: onms
  template:
    metadata:
      labels:
        app: onms
    spec:
      terminationGracePeriodSeconds: 120
      securityContext: # In order to be able to write data as non-root on the volumes
        fsGroup: 10001 # Default opennms group
      initContainers:
      # Wait for all the dependencies
      - name: dependencies
        image: waisbrot/wait
        imagePullPolicy: IfNotPresent
        env:
        - name: TARGETS
          value: postgresql.opennms.svc.cluster.local:5432,cassandra.opennms.svc.cluster.local:9042,kafka.opennms.svc.cluster.local:9092,esdata.opennms.svc.cluster.local:9200
        - name: TIMEOUT
          value: '900'
      # Initializes/Updates OpenNMS Configuration
      # Requires the same image/version used at runtime: horizon
      - name: init-config
        image: opennms/horizon:28.1.1
        imagePullPolicy: IfNotPresent
        command: [ bash, /init.sh ]
        env:
        - name: TZ
          valueFrom:
            configMapKeyRef:
              key: TIMEZONE
              name: common-settings
        - name: INSTANCE_ID
          valueFrom:
            configMapKeyRef:
              key: OPENNMS_INSTANCE_ID
              name: common-settings
        - name: ENABLE_ALEC
          value: 'true'
        - name: FEATURES_LIST
          value: opennms-alarm-history-elastic,opennms-es-rest,opennms-kafka-producer,opennms-situation-feedback # For H24+
        - name: CASSANDRA_SERVER
          value: cassandra.opennms.svc.cluster.local
        - name: CASSANDRA_REPLICATION_FACTOR
          valueFrom:
            configMapKeyRef:
              key: CASSANDRA_REPLICATION_FACTOR
              name: common-settings
        - name: CASSANDRA_DC
          valueFrom:
            configMapKeyRef:
              key: CASSANDRA_DC
              name: common-settings
        - name: KAFKA_SERVER
          value: kafka.opennms.svc.cluster.local
        - name: KAFKA_SASL_USERNAME
          valueFrom:
            secretKeyRef:
              key: KAFKA_SASL_USERNAME
              name: onms-passwords
        - name: KAFKA_SASL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: KAFKA_SASL_PASSWORD
              name: onms-passwords
        - name: ELASTIC_SERVER
          value: esdata.opennms.svc.cluster.local
        - name: ELASTIC_PASSWORD
          valueFrom:
            secretKeyRef:
              key: ELASTICSEARCH_PASSWORD
              name: onms-passwords
        - name: ELASTIC_INDEX_STRATEGY_FLOWS
          valueFrom:
            configMapKeyRef:
              key: ELASTIC_INDEX_STRATEGY_FLOWS
              name: common-settings
        - name: ELASTIC_REPLICATION_FACTOR
          valueFrom:
            configMapKeyRef:
              key: ELASTIC_REPLICATION_FACTOR
              name: common-settings
        - name: ELASTIC_NUM_SHARDS
          valueFrom:
            configMapKeyRef:
              key: ELASTIC_NUM_SHARDS
              name: common-settings
        - name: JAEGER_AGENT_HOST # Should be consistent with jaeger.yaml
          value: onms-tracing-agent.opennms.svc.cluster.local
        volumeMounts:
        - name: etc # Persistent volume for OpenNMS Configuration
          mountPath: /opennms-etc
        - name: init-scripts
          mountPath: /init.sh
          subPath: onms-core-init.sh
      # Install ALEC assuming it is not present on the Horizon Docker Image
      - name: alec-plugin
        image: busybox
        command: [ sh, -c ]
        args: [ "cd /plugin && wget -q -nc --no-check-certificate $ALEC_KAR_URL" ]
        env:
        - name: ALEC_KAR_URL
          value: https://github.com/OpenNMS/alec/releases/download/v1.1.1/opennms-alec-plugin.kar
        volumeMounts:
        - name: karaf-deploy
          mountPath: /plugin
      # Initializes Newts keyspace on Cassandra/ScyllaDB through CQLSH (requires newts.cql)
      - name: init-newts
        image: cassandra:4.0
        imagePullPolicy: IfNotPresent
        command: [ sh, -c, 'cqlsh -f /opennms-etc/newts.cql $CASSANDRA_HOST' ]
        env:
        - name: CASSANDRA_HOST
          value: cassandra.opennms.svc.cluster.local
        volumeMounts:
        - name: etc
          mountPath: /opennms-etc
      containers:
      - name: onms
        image: opennms/horizon:28.1.1
        imagePullPolicy: IfNotPresent
        args:
        - -s
        ports:
        - containerPort: 8101
          name: karaf
        - containerPort: 8980
          name: http
        - containerPort: 18980
          name: jmx
        env:
        - name: TZ
          valueFrom:
            configMapKeyRef:
              key: TIMEZONE
              name: common-settings
        - name: MEM_TOTAL_MB
          valueFrom:
            resourceFieldRef:
              resource: requests.memory
              divisor: 1Mi
        - name: JMX_PORT
          value: '18980'
        - name: JAVA_OPTS # Preferred way instead of opennms.conf; JMX exposed for troubleshooting purposes
          value: -Xms$(MEM_TOTAL_MB)m -Xmx$(MEM_TOTAL_MB)m -XX:+AlwaysPreTouch -XX:+UseG1GC -XX:+UseStringDeduplication -Xlog:gc*,gc+phases=debug:file=/opt/opennms/logs/gc.log:time,pid,tags:filecount=10,filesize=10m -Dcom.sun.management.jmxremote.port=$(JMX_PORT) -Dcom.sun.management.jmxremote.rmi.port=$(JMX_PORT) -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=true
        - name: POSTGRES_HOST
          value: postgresql.opennms.svc.cluster.local
        - name: POSTGRES_PORT
          value: '5432'
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              key: POSTGRES_PASSWORD
              name: onms-passwords
        - name: OPENNMS_DBNAME
          value: opennms
        - name: OPENNMS_DBUSER
          value: opennms
        - name: OPENNMS_DBPASS
          valueFrom:
            secretKeyRef:
              key: OPENNMS_DB_PASSWORD
              name: onms-passwords
        volumeMounts:
        - name: etc
          mountPath: /opt/opennms/etc
        - name: karaf-deploy
          mountPath: /opt/opennms/deploy
        - name: kafka-state # Persistent volume for Kafka Streaming (required by Kafka Producer)
          mountPath: /opennms-data/kafka
        resources: # When Cassandra is used, allow enough memory for the resource cache and the ring buffer
          limits:
            cpu: 4
            memory: 6Gi
          requests:
            cpu: 4
            memory: 4Gi
        readinessProbe:
          httpGet:
            path: /opennms/login.jsp
            port: http
          initialDelaySeconds: 15
          periodSeconds: 15
        livenessProbe:
          httpGet:
            path: /opennms/login.jsp
            port: http
          initialDelaySeconds: 30
          periodSeconds: 60
      volumes:
      - name: init-scripts
        configMap:
          name: init-scripts
      - name: karaf-deploy
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: etc
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi # Cannnot be less than that in AWS for an EBS Volume
  - metadata:
      name: kafka-state
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 2Gi
